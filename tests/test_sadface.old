import sadface
import validator
import unittest
import json

from exceptions import ConfigValidateFailed

from unittest.mock import MagicMock, patch

from nose2.tools import params

SECRETS_MGR_RESPONSE = {
    'SecretString': '{"user": "test", "pass": "pass123"}'
}
CONFIG_REMOVE = {
    'general': {
        'remove_unmanaged': ['splunk_enterprise_on_docker']
    },
    'splunk': {
        'host': 'localhost',
        'port': 8089,
        'verify': False
    }
}

TEST_SEARCH ={
    'Test Search': {
        'description': 'Test',
        'disabled': False,
        'lookback': '-1h'
    }
}

class TestCliDeploy(unittest.TestCase):
    class argsDeploy:
        debug = False
        nojson = True
        command = 'deploy'
        nobanner = True

    def setUp(self):
        self.sadface = sadface
        self.sadface.cli.parseArgs = MagicMock(return_value=self.argsDeploy)
        self.sadface.SplunkClient = MagicMock()
        self.sadface.loadConfig = MagicMock()
        self.sadface.os.listdir = MagicMock(return_value=['testapp'])
        self.sadface.glob.glob = MagicMock(return_value=['Test'])
        self.sadface.benedict.from_yaml = MagicMock()

    def test_DeployExistingSuccess(self):
        self.sadface.SplunkClient.deploySearch = MagicMock(return_value=200)
        self.sadface.SplunkClient.listSearches = MagicMock(return_value=['Test'])

        result = self.sadface.main()
        assert result == None

    def test_DeployNewSuccess(self):
        sadface.SplunkClient.deploySearch = MagicMock(return_value=201)
        sadface.SplunkClient.listSearches = MagicMock(return_value=['Example Search'])

        result = self.sadface.main()
        assert result == None

class TestCliValidate(unittest.TestCase):
    class argsValidate:
        debug = False
        nojson = True
        command = 'validate'
        nobanner = True

    @patch('sadface')
    def test_mainValidateSuccess(self, mk_cli):
        mk_cli.parseArgs.return_value = self.argsValidate

        result = mk_sadface.main()
        assert result == None

class TestFunctionValidate(unittest.TestCase):
    def setUp(self):
        self.sadface = sadface
        self.sadface.os.listdir = MagicMock(return_value=['test'])
        self.sadface.glob.glob = MagicMock(return_value=['test'])
        self.sadface.benedict.from_yaml = MagicMock()

    def test_validateSuccess(self):
        self.sadface.validator.getValidSearch = MagicMock()
        result = self.sadface.validate()
        assert result == True

    def test_validateFail(self):
        self.sadface.validator.getValidSearch = MagicMock(side_effect=ConfigValidateFailed)

        with self.assertRaises(
            (ConfigValidateFailed)
        ):
            print(self.sadface.validate())
            
